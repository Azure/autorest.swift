// --------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//
// The MIT License (MIT)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the ""Software""), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// --------------------------------------------------------------------------

import Foundation

// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import Foundation
import AzureCore



public enum MessagePriority: String, Codable {

    case normal

    case high

}



public enum MemberRole: String, Codable {

    case admin

    case user

}




public struct ReadReceipt {
    
    /* Id for `ReadReceipt` sender */
    public let userid : String
    
    /* Id for the message that has been read. This id is server generated. */
    public let messageid : String
    
    /* Read receipt timestamp */
    public let readtimestamp : String
    
    /* Client message id specified in the Microsoft.AzureCommunicationService.Gateway.Models.Client.CreateMessageRequest.
This Id is a client-specific Id in a numeric unsigned Int64 format. It can be used for client deduping, among other client usages. */
    public let clientmessageid : String
    
}


public struct PostReadReceiptRequest {
    
    /* The client message Id specified when the message was sent.
This Id is a client-specific Id in a numeric unsigned Int64 format. It can be used for client deduping, among other client usages. */
    public let clientmessageid : String
    
    /* Id of the latest message read by current user */
    public let messageid : String
    
}


public struct CreateMessageRequest {
    
    /* This Id is a client-specific Id in a numeric unsigned Int64 format. It can be used for client deduping, among other client usages. */
    public let clientmessageid : String
    
    /*   */
    public let priority : String
    
    /* Chat message content. */
    public let content : String
    
    /* The display name of the sender. */
    public let senderdisplayname : String
    
}


public struct CreateMessageResponse {
    
    /* The id of the message. This id is server generated. */
    public let id : String
    
    /* This Id is a client-specific Id in a numeric unsigned Int64 format. It can be used for client deduping, among other client usages. */
    public let clientmessageid : String
    
}


public struct GetMessagesResponse {
    
    /* List of messages. */
    public let messages : String
    
    /* Continuation link to get new and edited messages */
    public let syncstate : String
    
    /* If there are more messages that can be retrieved, the backward link will be populated. */
    public let backwardlink : String
    
}


public struct Message {
    
    /* The id of the message. This id is server generated. */
    public let id : String
    
    /* Type of the message. The valid value should be "Text" or "RichText". */
    public let messagetype : String
    
    /* The client message Id specified when the message was sent.
This Id is a client-specific Id in a numeric unsigned Int64 format. It can be used for client deduping, among other client usages. */
    public let clientmessageid : String
    
    /*   */
    public let priority : String
    
    /* Version of the message. */
    public let version : String
    
    /* Content of the message. */
    public let content : String
    
    /* Display name of the message sender. */
    public let senderdisplayname : String
    
    /* The timestamp when the message arrived at the server. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    public let originalarrivaltime : String
    
    /* The id of the message sender. */
    public let from : String
    
    /* The timestamp when the message was deleted in Unix time (epoch time) in milliseconds. */
    public let deletetime : String
    
    /* The timestamp when the message was edited in Unix time (epoch time) in milliseconds. */
    public let edittime : String
    
}


public struct UpdateMessageRequest {
    
    /* Chat message content. */
    public let content : String
    
}


public struct ThreadMember {
    
    /* The id of the thread member in the format `8:spool:ResourceId_AcsUserId` */
    public let id : String
    
    /* Display name for the thread member */
    public let displayname : String
    
    /* Role of the thread member. The valid value should be "User" or "Admin". */
    public let memberrole : String
    
    /* Time from which the group chat history is shared with the member in EPOCH time (milliseconds) */
    public let sharehistorytime : String
    
}


public struct AddThreadMembersRequest {
    
    /* Members to add to a thread */
    public let members : String
    
}


public struct CreateThreadRequest {
    
    /* Thread topic */
    public let topic : String
    
    /* Flag if a thread is sticky - sticky thread has an immutable member list, members cannot be added or removed.
At the moment we only support sticky threads with two members. */
    public let isstickythread : String
    
    /* Members to be added to the thread */
    public let members : String
    
}


public struct CreateThreadResponse {
    
    /* Thread Id */
    public let id : String
    
}


public struct GetThreadsResponse {
    
    /* List of threads. */
    public let threads : String
    
    /* Continuation link to get new and edited threads */
    public let syncstate : String
    
    /* If there are more threads that can be retrieved, the backward link will be populated. */
    public let backwardlink : String
    
}


public struct Thread {
    
    /* Thread id */
    public let id : String
    
    /* Thread topic */
    public let topic : String
    
    /* Thread creation time in Unix time (epoch time) in milliseconds */
    public let createdat : String
    
    /* Id of the thread owner */
    public let createdby : String
    
    /* Flag if a thread is sticky - sticky thread has an immutable member list, members cannot be added or removed. */
    public let isstickythread : String
    
    /* Members of the thread */
    public let members : String
    
}


public struct UpdateThreadRequest {
    
    /* Thread topic */
    public let topic : String
    
}



