@using AutoRest.Swift
@using AutoRest.Core.Model
@using AutoRest.Swift.Model
@using AutoRest.Swift.Templates
@using AutoRest.Core.Utilities

@inherits AutoRest.Core.Template<AutoRest.Swift.Model.CompositeTypeSwift>
@Header("// ")
import Foundation

public struct @(Model.TypeName) : @(Model.InterfaceOutput) {
    @(Model.FieldsAsString())
@EmptyLine
    enum CodingKeys: String, CodingKey {
        @(Model.FieldEnumValuesForCodable())
    }
@EmptyLine
@if (Model.HasRequiredFields) {
<text>
  public init(@(Model.RequiredPropertiesForInitParameters()))  {
    @(Model.RequiredPropertiesSettersForInitParameters())
  }
@EmptyLine
</text>
}

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    @(Model.FieldDecodingString())
  }
@EmptyLine
  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    @(Model.FieldEncodingString())
  }
}
@EmptyLine
@if (Model.HasRequiredFields) {
<text>
extension DataFactory {
  public static func create@(Model.Name)Protocol(@(Model.RequiredPropertiesForInitParameters())) -> @(Model.Name)Protocol {
    return @(Model.TypeName)(@(Model.RequiredPropertiesForInitParameters(true)))
  }
}
</text>
}