@using AutoRest.Swift
@using AutoRest.Core.Model
@using AutoRest.Swift.Model
@using AutoRest.Swift.Templates
@using AutoRest.Core.Utilities

@inherits AutoRest.Core.Template<AutoRest.Swift.Model.CompositeTypeSwift>
@Header("// ")
import Foundation
import azureSwiftRuntime

internal struct @(Model.TypeName) : @(Model.InterfaceOutput) {
    @(Model.FieldWriter.FieldsAsString())
@EmptyLine
        @(Model.FieldWriter.FieldEnumValuesForCodable(true))
@EmptyLine
@if (Model.HasRequiredFields) {
<text>
  public init(@(Model.FieldWriter.RequiredPropertiesForInitParameters()))  {
    @(Model.FieldWriter.RequiredPropertiesSettersForInitParameters())
  }
@EmptyLine
</text>
}else {
<text>
  public init()  {
  }
@EmptyLine
</text>
}

  public init(from decoder: Decoder) throws {
  @if (Model.HasCodingKeys) {
  <text>
    let container = try decoder.container(keyedBy: CodingKeys.self)
  </text>
    }
    @(Model.FieldWriter.FieldDecodingString())
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }
@EmptyLine
  public func encode(to encoder: Encoder) throws {
@if (Model.HasCodingKeys) {
<text>  
    var container = encoder.container(keyedBy: CodingKeys.self)
    @(Model.FieldWriter.FieldEncodingString())
</text>
}
  }
}
@EmptyLine
@if (Model.HasRequiredFields) {
<text>
extension DataFactory {
  public static func create@(Model.Name)Protocol(@(Model.FieldWriter.RequiredPropertiesForInitParameters())) -> @(Model.Name)Protocol {
    return @(Model.TypeName)(@(Model.FieldWriter.RequiredPropertiesForInitParameters(true)))
  }
}
</text>
}else {
<text>
extension DataFactory {
  public static func create@(Model.Name)Protocol() -> @(Model.Name)Protocol {
    return @(Model.TypeName)()
  }
}
</text>  
}