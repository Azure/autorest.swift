@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Swift
@using AutoRest.Swift.Model

@inherits AutoRest.Core.Template<AutoRest.Swift.Model.MethodSwift>

@WrapComment("// ", Model.Name + " " + Model.Description.ToSentence())
class @(Model.ContextModelName) {
    var client: @Model.ServiceModelName
    var method = "@(Model.HttpMethod)"
    var isLongRunningOperation = @(Model.IsLongRunningOperation())
    let path = "@(Model.Url)"
    private var pathParameters: [String: AnyObject]
    private var queryParameters: [String: AnyObject]
@for(var i = 0; i < Model.URLParameters.Count; i++) {
    @EmptyLine
    var param = Model.URLParameters[i];
    <text>
    var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration}") {
        set {
            pathParameters["@($"{param.VariableName}")"] = newValue
        }
        get {
            return pathParameters["@($"{param.VariableName}")"]
        }
    }
    </text>
}
@for(var i = 0; i < Model.QueryParameters.Count; i++) {
    @EmptyLine
    var param = Model.QueryParameters[i];
<text>
    var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration}") {
        set {
            queryParameters["@($"{param.VariableName}")"] = newValue
        }
        get {
            return queryParameters["@($"{param.VariableName}")"]
        }
    }
</text>
}

@if(Model.BodyParameter != null) {
    var param = Model.BodyParameter;
    @EmptyLine
<text>
    var @($"{param.VariableName}") :  @($"{param.VariableTypeDeclaration}") 
</text>    
}
@EmptyLine
    init(client: @(Model.ServiceModelName) {
        self.client = client
    }
@EmptyLine
    func execute() -> Observable<@($"{Model.ReturnTypeDeclaration()}")> {
        
    }
}