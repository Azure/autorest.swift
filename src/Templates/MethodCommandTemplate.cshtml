@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Swift
@using AutoRest.Swift.Model

@inherits AutoRest.Core.Template<AutoRest.Swift.Model.MethodSwift>
@WrapComment("// ", Model.Name + " " + Model.Description.ToSentence())
public class @(Model.CommandModelName) : BaseCommand {
@for (var i = 0; i < Model.URLParameters.Count; i++)
{
    var param = Model.URLParameters[i];
    <text>
    public var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration}")
    </text>
}

@for(var i = 0; i < Model.QueryParameters.Count; i++) {
    var param = Model.QueryParameters[i];
    if("apiversion".Equals(param.VariableName, StringComparison.OrdinalIgnoreCase)) {
<text>
    public var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration}") = "@($"{Model.ApiVersion}")"
</text>
    }else {
<text>
    public var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration}")
</text>
    }
}

@for (var i = 0; i < Model.HeaderParameters.Count; i++)
{
    @EmptyLine
    var param = Model.HeaderParameters[i];
    <text>
    public var @($"{param.VariableName}") : String? {
        set {
            if newValue != nil {
                headerParameters["@($"{param.SerializedName}")"] = newValue!
            }else {
                headerParameters["@($"{param.SerializedName}")"] = nil
            }
        }
        get {
            if headerParameters.contains(where: { $0.key == "@($"{param.SerializedName}")" }) {
                return headerParameters["@($"{param.SerializedName}")"]
            }else {
                return nil
            }
        }
    }
    </text>
}

@if (Model.BodyParameter != null)
{
    var param = Model.BodyParameter;
    <text>
    public var @($"{param.VariableName}") :  @($"{param.VariableTypeDeclaration}")
    </text>
}
@EmptyLine
    public init(test:String) {
        super.init()
        self.method = "@(Model.HttpMethod)"
        self.isLongRunningOperation = @(Model.IsLongRunningOperation() ? "true" : "false")
        self.path = "@(Model.Url)"
    }

    public override init() {
        super.init()
        self.method = "@(Model.HttpMethod)"
        self.isLongRunningOperation = @(Model.IsLongRunningOperation() ? "true" : "false")
        self.path = "@(Model.Url)"
    }
@EmptyLine
    public override func preCall()  {
@for(var i = 0; i < Model.URLParameters.Count; i++) {
    var param = Model.URLParameters[i];
    <text>
        if self.@($"{param.VariableName}") != nil { pathParameters["{@($"{param.SerializedName}")}"] = String(describing: self.@($"{param.VariableName}")!) }
    </text>
}
@for(var i = 0; i < Model.QueryParameters.Count; i++) {
    var param = Model.QueryParameters[i];
    var parameterKey = param.SerializedName;
    if("apiversion".Equals(param.VariableName, StringComparison.OrdinalIgnoreCase)) {
        parameterKey = "api-version";
    }
    <text>
        if self.@($"{param.VariableName}") != nil { queryParameters["@($"{parameterKey}")"] = String(describing: self.@($"{param.VariableName}")!) }
    </text>
}       
@if (Model.BodyParameter != null)
{
    var param = Model.BodyParameter;
    <text>
        self.body = @($"{param.VariableName}")
    </text>
}
}
@EmptyLine
@if (Model.BodyParameter != null)
{
    var param = Model.BodyParameter;
    <text>
    public override func encodeBody() throws -> Data? {
        let jsonEncoder = JSONEncoder()
        let jsonData = try jsonEncoder.encode(@($"{param.VariableName}") as! @($"{param.EncodeTypeDeclaration}"))
        return jsonData
    }
    </text>
}
@EmptyLine
@if (!"void".Equals(Model.MethodReturnType, StringComparison.OrdinalIgnoreCase))
{
    <text>
    public override func returnFunc(decoder: ResponseDecoder, jsonString: String) throws -> Decodable? {
        return try decoder.decode(@($"{Model.MethodReturnTypeDecodable}").self, from: jsonString)
    }

    public func execute(client: RuntimeClient) throws -> @($"{Model.MethodReturnType}") {
        return try client.execute(command: self) as! @($"{Model.MethodReturnType}")
    }
    </text>
}else {
    <text>
    public func execute(client: RuntimeClient) throws -> Decodable? {
        return try client.execute(command: self)
    }
    </text>
}
}
