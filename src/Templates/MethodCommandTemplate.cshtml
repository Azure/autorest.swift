@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Swift
@using AutoRest.Swift.Model

@inherits AutoRest.Core.Template<AutoRest.Swift.Model.MethodSwift>
import Foundation
import azureSwiftRuntime

public protocol @(Model.GroupName)@(Model.Name)  {
@if (Model.IsPageable) {
<text>
    var nextLink: String? { get }
    var hasAdditionalPages : Bool { get }
</text>
}

    var headerParameters: [String: String] { get set }
@for (var i = 0; i < Model.URLParameters.Count; i++)
{
    var param = Model.URLParameters[i];
    <text>
    var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration(param.IsRequired)}") { get set }
    </text>
}
@for(var i = 0; i < Model.QueryParameters.Count; i++) {
    var param = Model.QueryParameters[i];
<text>
    var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration(param.IsRequired)}") { get set }
</text>
}
@for (var i = 0; i < Model.HeaderParameters.Count; i++)
{
    var param = Model.HeaderParameters[i];
<text>
    var @($"{param.VariableName}") : String?  { get set }
</text>
}
@if (Model.BodyParameter != null)
{
    var param = Model.BodyParameter;
<text>
    var @($"{param.VariableName}") :  @($"{param.VariableTypeDeclaration(false)}")  { get set }
</text>
}
@if (!"void".Equals(Model.MethodReturnType, StringComparison.OrdinalIgnoreCase))
{
<text>
    func execute(client: RuntimeClient, 
        completionHandler: @@escaping (@($"{Model.MethodReturnType}"), Error?) -> Void) -> Void ;
</text>
}else {
<text>
    func execute(client: RuntimeClient,
        completionHandler: @@escaping (Error?) -> Void) -> Void;
</text>
}
}
@EmptyLine
extension Commands.@(Model.GroupName) {
@WrapComment("// ", Model.Name + " " + Model.Description.ToSentence())
internal class @(Model.CommandModelName) : BaseCommand, @(Model.GroupName)@(Model.Name) {
@if (Model.IsPageable) {
<text>
    var nextLink: String? 
    public var hasAdditionalPages : Bool {
        get {
            return nextLink != nil
        }
    }
</text>
}
@for (var i = 0; i < Model.URLParameters.Count; i++)
{
    var param = Model.URLParameters[i];
<text>
    public var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration(param.IsRequired)}")
</text>
}

@for(var i = 0; i < Model.QueryParameters.Count; i++) {
    var param = Model.QueryParameters[i];
    if("apiversion".Equals(param.VariableName, StringComparison.OrdinalIgnoreCase)) {
<text>
    public var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration(param.IsRequired)}") = "@($"{Model.ApiVersion}")"
</text>
    }else {
<text>
    public var @($"{param.VariableName}") : @($"{param.VariableTypeDeclaration(param.IsRequired)}")
</text>
    }
}

@for (var i = 0; i < Model.HeaderParameters.Count; i++)
{
    @EmptyLine
    var param = Model.HeaderParameters[i];
    <text>
    public var @($"{param.VariableName}") : String? {
        set {
            if newValue != nil {
                headerParameters["@($"{param.SerializedName}")"] = newValue!
            }else {
                headerParameters["@($"{param.SerializedName}")"] = nil
            }
        }
        get {
            if headerParameters.contains(where: { $0.key == "@($"{param.SerializedName}")" }) {
                return headerParameters["@($"{param.SerializedName}")"]
            }else {
                return nil
            }
        }
    }
    </text>
}

@if (Model.BodyParameter != null)
{
    var param = Model.BodyParameter;
    <text>
    public var @($"{param.VariableName}") :  @($"{param.VariableTypeDeclaration(false)}")
    </text>
}
@EmptyLine
@if(!Model.HasRequiredPropertiesForInitParameters()) {
<text>
    public override init() {
</text>

}else {
<text>
    public init(@(Model.RequiredPropertiesForInitParameters())) {
        @(Model.RequiredPropertiesSettersForInitParameters())
</text>
}
        super.init()
@if(Model.IsCustomBaseUri) 
{
<text>
        self.baseUrl = "@(Model.CodeModel.BaseUrl)"
</text>
}
        self.method = "@(Model.HttpMethod)"
        self.isLongRunningOperation = @(Model.IsLongRunningOperation() ? "true" : "false")
        self.path = "@(Model.Url)"
        self.headerParameters = ["Content-Type":"@(Model.RequestContentType)"]
    }
@EmptyLine
    public override func preCall()  {
@for(var i = 0; i < Model.URLParameters.Count; i++) {
    var param = Model.URLParameters[i];
    @if(param.IsRequired) {
<text>
        self.pathParameters["{@($"{param.SerializedName}")}"] = String(describing: self.@($"{param.VariableName}"))
</text>

    }else {
<text>
        if self.@($"{param.VariableName}") != nil { pathParameters["{@($"{param.SerializedName}")}"] = String(describing: self.@($"{param.VariableName}")!) }
</text>
    }
}
@for(var i = 0; i < Model.QueryParameters.Count; i++) {
    var param = Model.QueryParameters[i];
    var parameterKey = param.SerializedName;
    if("apiversion".Equals(param.VariableName, StringComparison.OrdinalIgnoreCase)) {
        parameterKey = "api-version";
    }
    @if(param.IsRequired) {
<text>
        self.queryParameters["{@($"{param.SerializedName}")}"] = String(describing: self.@($"{param.VariableName}"))
</text>
    }else {
<text>
        if self.@($"{param.VariableName}") != nil { queryParameters["{@($"{param.SerializedName}")}"] = String(describing: self.@($"{param.VariableName}")!) }
</text>
    }
}       
@if (Model.BodyParameter != null)
{
    var param = Model.BodyParameter;
<text>
    self.body = @($"{param.VariableName}")
</text>
}
}
@EmptyLine
@if (Model.IsBodyParameterTypeAnEnum()) {
    var param = Model.BodyParameter;
<text>
    public override func encodeBody() throws -> Data? {
        return (@($"{param.VariableName}").rawValue.data(using: String.Encoding.utf8))!
    }
</text>
} else if (Model.IsBodyParameterTypeNSData()) {
    var param = Model.BodyParameter;
<text>
    public override func encodeBody() throws -> Data? {
        return self.@($"{param.VariableName}") 
    }
</text>
}
else if (Model.BodyParameter != null)
{
    var param = Model.BodyParameter;
    <text>
    public override func encodeBody() throws -> Data? {
        let contentType = "@(Model.EncodeMimeType)"
        if let mimeType = MimeType.getType(forStr: contentType) {
            let encoder = try CoderFactory.encoder(for: mimeType)
            let encodedValue = try encoder.encode(@($"{param.VariableName}"))
            return encodedValue
        }

        throw DecodeError.unknownMimeType
    }
</text>
}
@EmptyLine
@if(Model.IsReturnTypeAnEnum()) 
{
<text>
    public override func returnFunc(data: Data) throws -> Decodable? {
        let contentType = "@(Model.DecodeMimeType)"
        if let mimeType = MimeType.getType(forStr: contentType) {
            let decoder = try CoderFactory.decoder(for: mimeType)
            let rawVal =  try decoder.decode(String.self, from: data)
            return @($"{Model.MethodReturnTypeDecodable}")(rawValue: rawVal)
        }

        throw DecodeError.unknownMimeType
    }

    public func execute(client: RuntimeClient, 
        completionHandler: @@escaping (@($"{Model.MethodReturnType}"), Error?) -> Void) -> Void {
        client.@($"{Model.GetExecuteCommandName()}")(command: self) {
            (result: @($"{Model.MethodReturnTypeDecodable}"), error: Error?) in
            completionHandler(result, error)
        } 
    }    
</text>
}
else if(Model.IsReturnTypeData()) 
{
<text>
    public override func returnFunc(data: Data) throws -> Decodable? {
        return DataWrapper(data: data);
    }

    public func execute(client: RuntimeClient, 
        completionHandler: @@escaping (@($"{Model.MethodReturnType}"), Error?) -> Void) -> Void {
        client.@($"{Model.GetExecuteCommandName()}")(command: self) {
            (result: DataWrapper?, error: Error?) in
            let data = result?.data as Data?
            completionHandler(data!, error)
        } 
    }    
</text>
}
else if (!"void".Equals(Model.MethodReturnType, StringComparison.OrdinalIgnoreCase))
{
<text>
    public override func returnFunc(data: Data) throws -> Decodable? {
        let contentType = "@(Model.DecodeMimeType)"
        if let mimeType = MimeType.getType(forStr: contentType) {
            let decoder = try CoderFactory.decoder(for: mimeType)
</text>
@if (Model.IsPageable) {
<text>
            if var pageDecoder = decoder as? PageDecoder {
                pageDecoder.isPagedData = true
                pageDecoder.nextLinkName = @(Model.NextLink ?? "nil")
            }
</text>
}
<text>
            let result = try decoder.decode(@($"{Model.MethodReturnTypeDecodable}").self, from: data)
@if (Model.IsPageable) {
<text>
            if var pageDecoder = decoder as? PageDecoder {
                self.nextLink = pageDecoder.nextLink
            }
</text>
}
            return result;
        }

        throw DecodeError.unknownMimeType
    }

    public func execute(client: RuntimeClient, 
        completionHandler: @@escaping (@($"{Model.MethodReturnType}"), Error?) -> Void) -> Void {
</text>
if (Model.IsPageable) {
<text>
        if self.nextLink != nil {
            self.path = nextLink!
            self.nextLink = nil;
            self.pathType = .absolute
        }
</text>
}
<text>
        client.@($"{Model.GetExecuteCommandName()}")(command: self) {
            (result: @($"{Model.MethodReturnTypeDecodable}"), error: Error?) in
            completionHandler(result@(Model.IsReturnTypeOptional ? "" : "!"), error)
        } 
    }
</text>
}else {
<text>
    public func execute(client: RuntimeClient,
        completionHandler: @@escaping (Error?) -> Void) -> Void {
        client.@($"{Model.GetExecuteCommandName()}")(command: self) {
            (error) in
            completionHandler(error)
        } 
    }
</text>
}
}
}