// Construct and send request
guard let requestUrl = url.appendingQueryParameters(queryParams) else { return }
guard let request = try? HTTPRequest(method: .{{ op.method }}, url: requestUrl, headers: headers) else { return }
let context = PipelineContext.of(keyValues: [
   // TODO: Context keys
   {% for param in op.pipelineContext %}
   {{ param.key }} : {{ param.value}}
   {% endfor %}
])
if let cancellationToken = options?.cancellationToken {
   cancellationToken.addTimeout(from: self.options.transportOptions)
   context.add(value: cancellationToken as AnyObject, forKey: .cancellationToken)
}
self.request(request, context: context) { result, httpResponse in
    {% include "OperationResponseSnippet.stencil" op %}
}
