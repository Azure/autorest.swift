{% include "HeaderSnippet.stencil" %}

{% include "ImportSnippet.stencil" %}
// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable function_body_length
// swiftlint:disable type_body_length

extension CharacterSet {
    static let urlQueryValueAllowed4 = urlQueryAllowed.subtracting(.init(charactersIn: "!*'();:@&=+$,/?#[]"))
}

{{ model.comment }}
public final class {{ model.name }}: {{ model.protocols }} {

    {% if model.paging != nil %}
    public func continuationUrl(forRequestUrl requestUrl: URL, withContinuationToken token: String) -> URL? {
        return URL(string: token)
    }
    {% endif %}

    /// API version of the {{ model.description }} to invoke. Defaults to the latest.
    public enum ApiVersion: String {
        /// API version "{{ model.apiVersion }}"
        case {{ model.apiVersionName }} = "{{ model.apiVersion }}"

        /// The most recent API version of the {{ model.description }}
        public static var latest: ApiVersion {
             return .{{ model.apiVersionName }}
        }
    }

    /// Options provided to configure this `{{ model.name }}`.
    public let options: {{ model.name }}Options

    // MARK: Initializers

    /// Create a {{ model.name }} client.
    /// - Parameters:
    ///   - baseUrl: Base URL for the {{ model.name }}.
    ///   - authPolicy: An `Authenticating` policy to use for authenticating client requests.
    ///   - options: Options used to configure the client.
    public init(
    {% for param in model.globalParameters %}
    {% if param.optional == false %}
        {{ param.name }} : {{ param.type }},
    {% endif %}
    {% endfor %}
        baseUrl: URL,
        authPolicy: Authenticating,
        withOptions options: {{ model.name }}Options
    ) throws {
        {% for param in model.globalParameters %}
        {% if param.optional == false %}
        self.{{ param.name }} = {{ param.name }}
        {% endif %}
        {% endfor %}
        self.options = options
        super.init(
            baseUrl: baseUrl,
            transport: URLSessionTransport(),
            policies: [
                UserAgentPolicy(for: {{ model.name }}.self, telemetryOptions: options.telemetryOptions),
                RequestIdPolicy(),
                AddDatePolicy(),
                authPolicy,
                ContentDecodePolicy(),
                LoggingPolicy(),
                NormalizeETagPolicy()
            ],
            logger: options.logger,
            options: options
        )
    }

    public func url(forTemplate templateIn: String, withKwargs kwargs: [String: String]? = nil, and addedParams: [QueryParameter]? = nil) -> URL? {
     //  var template = templateIn
     //   if template.hasPrefix("/") { template = String(template.dropFirst()) }
        var urlString = baseUrl.absoluteString + templateIn
     //   if template.starts(with: urlString) {
    //        urlString = template
    //    } else {
    //        urlString += template
    //    }
        if let urlKwargs = kwargs {
            for (key, value) in urlKwargs {
                urlString = urlString.replacingOccurrences(of: "{\(key)}", with: value)
            }
        }
        guard let url = URL(string: urlString) else {
            return nil
        }

        guard !(addedParams?.isEmpty ?? false) else { return url }

        return appendingQueryParameters(url: url, addedParams ?? [])
    }
    
    private func appendingQueryParameters(url: URL, _ addedParams: [QueryParameter]) -> URL? {
        guard !addedParams.isEmpty else { return url }
        guard var urlComps = URLComponents(url: url, resolvingAgainstBaseURL: true) else { return nil }

        let addedQueryItems = addedParams.map { name, value in URLQueryItem(name: name, value: value?.addingPercentEncoding(withAllowedCharacters: .urlQueryValueAllowed4)) }
       // if var percentEncodedQueryItems = urlComps.percentEncodedQueryItems, !percentEncodedQueryItems.isEmpty {
       //     percentEncodedQueryItems.append(contentsOf: addedQueryItems)
       //     urlComps.percentEncodedQueryItems = percentEncodedQueryItems
        // } else {
            urlComps.percentEncodedQueryItems = addedQueryItems
       // }

        return urlComps.url
    }

{% for param in model.globalParameters %}
    // {{ param.comment }}
    public var {{ param.name }}: {{ param.type }}{{ param.defaultValue }}
{% endfor %}

{% for property in model.namedOperationGroupShortcuts %}
    public lazy var {{ property.value }}: {{ property.key }} = {{ property.key }}(client: self)
{%endfor %}

    // MARK: Public Client Methods
{% for group in model.operationGroups %}
    {% include "OperationGroupSnippet.stencil" group %}
{% endfor %}
}
