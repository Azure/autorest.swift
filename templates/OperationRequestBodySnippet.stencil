// Construct request
{% if op.params.body.strategy == "plain" %}
guard let requestBody = try? JSONEncoder().encode( {{ op.params.body.param.name }} ) else {
    self.options.logger.error("Failed to encode request body as json.")
    return
}
{% elif op.params.body.strategy == "unixTime" %}
let encoder = JSONEncoder()
encoder.dateEncodingStrategy = .secondsSince1970
guard let requestBody = try? encoder.encode( {{ op.params.body.param.name }} ) else {
    self.options.logger.error("Failed to encode request body in unixTime.")
    return
}
{% elif op.params.body.strategy == "flattened" %}
let body = {{ op.params.body.param.typeName }}(
    {% for child in op.params.body.children %}
    {{ child.name }}: {{ child.path }}{% ifnot forloop.last %},{% endif%}
    {% endfor %}
)
guard let requestBody = try? JSONEncoder().encode(body) else {
    self.options.logger.error("Failed to encode request body as json.")
    return
}
{% endif %}
guard let requestUrl = self.url(forTemplate: urlTemplate, withKwargs: pathParams, and: queryParams) else {
    self.options.logger.error("Failed to construct request url")
    return
}

guard let request = try? HTTPRequest(method: .{{ op.request.method }}, url: requestUrl, headers: headers, data: requestBody) else {
    self.options.logger.error("Failed to construct HTTP request")
    return
}

