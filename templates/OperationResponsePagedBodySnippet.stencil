switch result {
case let .success(data):
    {% include "OperationResponseDataSnippet.stencil" %}
    {% include "OperationResponseStatusCodeSnippet.stencil" %}
    {% include "OperationResponseReturnTypeStatusCodeSnippet.stencil" %}
    {
        do {
            let decoder = JSONDecoder()
            let codingKeys = PagedCodingKeys(
                items: "{{ op.returnType.pagingNames.itemName }}",
                continuationToken: "{{ op.returnType.pagingNames.nextLinkName }}"
            )
            let paged = try {{ op.returnType.name }}(
                client: self,
                request: request,
                context: context,
                data: data,
                codingKeys: codingKeys,
                decoder: decoder
            )
            DispatchQueue.main.async {
                completionHandler(.success(paged), httpResponse)
            }
        } catch {
            DispatchQueue.main.async {
                completionHandler(.failure(AzureError.sdk("Decoding error.", error)), httpResponse)
        }
        }
    }
    {% include "OperationResponseExceptionSnippet.stencil" %}
case let .failure(error):
    {% include "OperationResponseFailureSnippet.stencil" %}
}
