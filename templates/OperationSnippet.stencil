{{ op.comment }}
/// - Parameters:
{{ op.signatureComment }}
///    - options: A list of options for the operation
///    - completionHandler: A completion handler that receives a status code on
///     success.
public func {{ op.name }}(
    {% include "BodyParamSnippet.stencil" op %}
    {% for param in op.params.signature %}
    {{ param.name }}: {{ param.type }}{{ param.defaultValue }},
    {% endfor %}
    withOptions options: {{ op.clientMethodOptions.name }}? = nil,
    completionHandler: @escaping HTTPResultHandler<{{ op.returnType.name }}>
) {
    {% for method in op.params.method %}
        {% if method.keyValueType == "date" %}
        guard let {{ method.key }} = Date({{ method.defaultValue }}, format: Date.Format.iso8601) else {
            self.options.logger.error("Failed to construct Date from {{ method.value }}")
            return
        }
        let {{ method.key }}String = DateFormatter().string(from: {{ method.key }})
        {% elif method.keyValueType == "byteArray" %}
        let {{ method.key }} =  {{ method.defaultValue }}.utf8
        let {{ method.key }}String = String(bytes: {{ method.key }}, encoding: .utf8)
        {% else %}
        let {{ method.key }} = {{ method.defaultValue }}
        {% endif %}
    {% endfor %}

    {% include "OperationUrlSnippet.stencil" %}
    {% include "OperationQueryParamSnippet.stencil" %}
    {% include "OperationHeaderSnippet.stencil" %}
    {% if op.params.hasOptionalParams %}
    {% include "OperationOptionsSnippet.stencil" op %}
    {% endif %}
    {% include "OperationSendRequestSnippet.stencil" op %}
}
