{{ op.comment }}
/// - Parameters:
{{ op.signatureComment }}
///    - options: A list of options for the operation
///    - completionHandler: A completion handler that receives a status code on
///     success.
public func {{ op.name }}(
{% if op.params.body != nil %}
    {% include "BodyParamSnippet.stencil" op %}
{% endif %}
{% for param in op.params.signature %}
    {{ param.name }}: {{ param.type }}{{ param.defaultValue }},
{% endfor %}
    withOptions options: {{ op.clientMethodOptions.name }}? = nil,
    completionHandler: @escaping HTTPResultHandler<{{ op.returnType.type }}>
) {
{# for param in op.params.methodDecoding #}
    {# include "OperationDecodingSnippet.stencil" param #}
{# endfor #}

    // Construct URL
    let urlTemplate = "{{ op.request.path }}"
    let params = RequestParameters(
    {% for param in op.params.all %}
        {% if param.location == "header" %}
        (.{{ param.location }}, "{{ param.serializedName }}", {{ param.pathOrValue }}, .{{ param.encode }}){% if not forloop.last %},{% endif %}
        {% else %}
        (.{{ param.location }}, "{{ param.name }}", {{ param.pathOrValue }}, .{{ param.encode }}){% if not forloop.last %},{% endif %}
        {% endif %}
    {% endfor %}
    )

    {# Handle body parameter #}
{% if op.request.strategy == "body" %}
    {% include "OperationRequestBodySnippet.stencil" op %}
{% elif op.request.strategy == "noBody" %}
    {% include "OperationRequestSnippet.stencil" op %}
{% elif op.request.strategy == "patchBody" %}
    {% include "OperationRequestPatchBodySnippet.stencil" op %}
{% else %}
    // TODO: Couldn't find template for {{ op.request.strategy }}
    assertFailure("Autorest generated bad code.")
{% endif %}

    // Send request
    let context = PipelineContext.of(keyValues: [
    {% for param in op.pipelineContext %}
       {{ param.key }} : {{ param.value}} as AnyObject,
    {% endfor %}
    ])
    context.add(cancellationToken: options?.cancellationToken, applying: client.options)
    context.merge(with: options?.context)
    client.request(request, context: context) { result, httpResponse in
        let dispatchQueue = options?.dispatchQueue ?? self.client.commonOptions.dispatchQueue ?? DispatchQueue.main
        {% include "OperationResponseSnippet.stencil" op %}
    }
}
