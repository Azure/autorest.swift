{{ op.comment }}
public func {{ op.name }}(
    {% for param in op.params %}
    {{ param.name }}: {{ param.type }}{{ param.defaultValue }},
    {% endfor %}
    completionHandler: @escaping HTTPResultHandler<{{ op.returnType.name }}>
) {
    // Construct URL
    let urlTemplate = "{{ op.path }}"
    guard let url = self.url(forTemplate: urlTemplate) else { return }

    // Construct query
    var queryParams: [QueryParameter] = [
        {% for param in op.queryParams %}
        "{{ param.key }}" : {{ param.value}}
        {% endfor %}
    ]

    // Construct headers
    var headers = HTTPHeaders([
        {% for param in op.headerParams %}
        "{{ param.key }}" : {{ param.value}}
        {% endfor %}
    ])

    // Process endpoint options
    if let options = options {
        // Query options
        {% for opt in op.options.queryOptions %}
        if let {{ opt.name }} = options.{{ opt.name }} { queryParams.append("{{ opt.name }}", {{ opt.name}}) }
        {% endfor %}

        // Header options
        {% for opt in op.options.headerOptions %}
        if let {{ opt.name }} = options.{{ opt.name }} {
            headers[.{{ opt.name }}] = {{ opt.name }}
        }
        {% endfor %}
    }

    // Construct and send request
    guard let requestUrl = url.appendingQueryParameters(queryParams) else { return }
    guard let request = try? HTTPRequest(method: .{{ op.method }}, url: requestUrl, headers: headers) else { return }
    let context = PipelineContext.of(keyValues: [
        // TODO: Context keys
    ])
    if let cancellationToken = options?.cancellationToken {
        cancellationToken.addTimeout(from: self.options.transportOptions)
        context.add(value: cancellationToken as AnyObject, forKey: .cancellationToken)
    }
    self.request(request, context: context) { result, httpResponse in
        switch result {
        case let .success(data):
            guard let data = data else {
                let noDataError = AzureError.sdk("Response data expected but not found.")

                DispatchQueue.main.async {
                    completionHandler(.failure(noDataError), httpResponse)
                }
                return
            }
            do {
                // TODO: Snippet here depends on the operation return type
                // let decoder = JSONDecoder()
                // let paged = try PagedCollection<BlobItem>(
                //     client: self,
                //     request: request,
                //     data: data,
                //     codingKeys: codingKeys,
                //     decoder: decoder
                // )
                // DispatchQueue.main.async {
                //     completionHandler(.success(paged), httpResponse)
                // }
            } catch {
                DispatchQueue.main.async {
                    completionHandler(.failure(AzureError.sdk("Decoding error.", error)), httpResponse)
                }
            }
        case let .failure(error):
            DispatchQueue.main.async {
                completionHandler(.failure(error), httpResponse)
            }
        }
    }
}

