{% include "HeaderSnippet.stencil" %}

{% include "ImportSnippet.stencil" %}
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

{% for flattenName, properties  in model.flattenProperties %}
struct {{ flattenName|capitalize }} : Codable {
    {% for property in properties %}
        public let {{ property.name }}: {{ property.type }}
    {% endfor %}
    
    enum CodingKeys: String, CodingKey {
        {% for property in properties %}
        case {{ property.name }}= "{{ property.serializedName }}"
        {% endfor %}
    }
}
{% endfor %}

{{ model.comment }}
public {{ model.objectType }} {{ model.name }} : {{ model.inheritance }} {
    // MARK: Properties
    {% for property in model.properties %}
    {{ property.comment }}
    public let {{ property.name }}: {{ property.type }}
    {% endfor %}

    {% for flattenName, properties  in model.flattenProperties %}
    internal let {{ flattenName }}: {{ flattenName|capitalize }}?
    {% for property in properties %}
    public var {{ property.name }}: {{ property.type }} {
        get {
            return {{ flattenName }}?.{{ property.name }}
        }
    }
    {% endfor %}
    {% endfor %}

    {% if model.hasConstants %}
    // MARK: Constants
    {% for constant in model.constants %}
    {{ constant.comment }}
    public let {{ constant.name }}{{constant.defaultValue}}
    {% endfor %}
    {% endif %}

    // MARK: Initializers

    /// Initialize a `{{ model.name }}` structure.
    /// - Parameters:
    {% for property in model.properties %}
    ///   - {{ property.name }}: {{ property.comment.withoutPrefix }}
    {% endfor %}
    public init(
    {% for flattenName, properties  in model.flattenProperties %}
        {% for property in properties %}
        {{ property.name }}: {{ property.type }}{{ property.initDefaultValue }}{% if not forloop.last or model.hasProperty %},{% endif%}
        {% endfor %}
    {% endfor %}
    {% for property in model.properties %}
        {{ property.name }}: {{ property.type }} {{ property.initDefaultValue }}{% ifnot forloop.last %},{% endif%}
    {% endfor %}
    ) {
    {% for property in model.properties %}
        self.{{ property.name }} = {{ property.name }}
    {% endfor %}
    {% for flattenName, properties  in model.flattenProperties %}
        self.{{ flattenName }} = {{ flattenName|capitalize }}(
        {% for property in properties %}
        {{ property.name }}: {{ property.name }}{% if not forloop.last %},{% endif%}
        {% endfor %}
        )
    {% endfor %}
    }

    // MARK: Codable

    {% include "ModelDecoderEncoderSnippet.stencil" model %}
}
