{% include "Header_Snippet.stencil" %}

{% include "Import_Snippet.stencil" %}

{% for enum in models.enums %}
    {{ enum.comment }}
{% if enum.isExtensible %}
    public enum {{ enum.name }}: RequestStringConvertible, Codable, Equatable {
        /// Custom value for unrecognized enum values
        case custom({{ enum.type }})
        {% for choice in enum.choices %}
            {{ choice.comment }}
            case {{ choice.name }}
        {% endfor %}

        public var requestString: String {
            switch self {
            case let .custom(val):
                return val
            {% for choice in enum.choices %}
                case .{{ choice.name }}:
                    return "{{ choice.value }}"
            {% endfor %}
            }
        }

        public init(_ val: {{ enum.type }}) {
            switch val.lowercased() {
            {% for choice in enum.choices %}
                case "{{ choice.value | lowercase }}":
                    self = .{{ choice.name }}
            {% endfor %}
            default:
                self = .custom(val)
            }
        }

        // MARK: Codable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let value = try container.decode({{ enum.type }}.self)
            self.init(value)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(requestString)
        }
    }
{% else %}
    public enum {{ enum.name }}: {{ enum.type }}, Codable, RequestStringConvertible {
        {% for choice in enum.choices %}
            {{ choice.comment }}
            case {{ choice.name }} = "{{choice.value}}"
        {% endfor %}

        public var requestString: String {
            return rawValue
        }
    }
{% endif %}
{% endfor %}
