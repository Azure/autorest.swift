enum CodingKeys: String, CodingKey {
{% for property in model.properties %}
       case {{ property.name }}
{% endfor %}
{% for constant in model.constants %}
    case {{ constant.name }} = "{{ constant.serializedName }}"
{% endfor %}
}

/// Initialize a `{{ model.name }}` structure from decoder
public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
{% for property in model.properties %}
    {% if property.optional %}
        self.{{ property.name }} = try? container.decode({{ property.className }}.self, forKey: .{{ property.name }})
    {% else %}
        self.{{ property.name }} = try container.decode({{ property.className }}.self, forKey: .{{ property.name }})
    {% endif %}
{% endfor %}
}

/// Encode a `{{ model.name }}` structure
public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
{% for property in model.properties %}
    {% if property.optional %}
        if {{ property.name }} != nil { try? container.encode({{ property.name }} , forKey: .{{ property.name }}) }
    {% else %}
        try container.encode({{ property.name }}, forKey: .{{ property.name }})
    {% endif %}
{% endfor %}
{% for constant in model.constants %}
    try container.encode({{ constant.name }}, forKey: .{{ constant.name }})
{% endfor %}
}
