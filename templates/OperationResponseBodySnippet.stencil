
switch result {
case let .success(data):
    guard let data = data else {
        let noDataError = AzureError.sdk("Response data expected but not found.")
        DispatchQueue.main.async {
            completionHandler(.failure(noDataError), httpResponse)
        }
        return
    }
    do {
        let decoder = JSONDecoder()
        let decoded = try decoder.decode({{ op.returnType.name }}.self, from: data)
        DispatchQueue.main.async {
            completionHandler(.success(decoded), httpResponse)
        }
    } catch {
        DispatchQueue.main.async {
            completionHandler(.failure(AzureError.sdk("Decoding error.", error)), httpResponse)
        }
    }
case let .failure(error):
    DispatchQueue.main.async {
        completionHandler(.failure(error), httpResponse)
    }
}
