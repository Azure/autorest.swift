
switch result {
case let .success(data):
    {% include "OperationResponseData.stencil" %}
    let statusCode = httpResponse?.statusCode ?? -1
    if [
    {% for statusCode in op.returnType.statusCodes %}
      {{ statusCode }},
    {% endfor  %}
    ].contains(statusCode)
    {
        do {
            let decoder = JSONDecoder()
            let decoded = try decoder.decode({{ op.returnType.name }}.self, from: data)
            DispatchQueue.main.async {
                completionHandler(.success(decoded), httpResponse)
            }
        } catch {
            DispatchQueue.main.async {
                completionHandler(.failure(AzureError.sdk("Decoding error.", error)), httpResponse)
            }
        }
    }
    {% include "OperationResponseExceptionSnippet.stencil" %}
case let .failure(error):
    DispatchQueue.main.async {
        completionHandler(.failure(error), httpResponse)
    }
}
