enum CodingKeys: String, CodingKey {
{% for property in model.properties %}
    case {{ property.name }} = "{{ property.serializedName }}"
{% endfor %}
{% for constant in model.constants %}
    case {{ constant.name }} = "{{ constant.serializedName }}"
{% endfor %}
{% for flattenName, properties  in model.flattenProperties %}
    case {{ flattenName }}
{% endfor %}
}

/// Initialize a `{{ model.name }}` structure from decoder
public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    {% for property in model.properties %}
    {% include "ModelDecoderProperty.stencil" %}
    {% endfor %}
    {% for flattenName, properties in model.flattenProperties %}
    self.{{ flattenName }} = try? container.decode({{flattenName|capitalize}}.self, forKey: .{{flattenName}})
    {% endfor %}
}

/// Encode a `{{ model.name }}` structure
public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    {% for property in model.properties %}
    {% include "ModelEncoderProperty.stencil" %}
    {% endfor %}
    {% for flattenName, properties in model.flattenProperties %}
    if {{ flattenName }} != nil { try container.encode({{ flattenName }}, forKey: .{{ flattenName }}) }
    {% endfor %}
    {% for constant in model.constants %}
    try container.encode({{ constant.name }}, forKey: .{{ constant.name }})
    {% endfor %}
}
