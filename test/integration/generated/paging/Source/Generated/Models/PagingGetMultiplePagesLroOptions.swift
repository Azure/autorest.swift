// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Parameter group
public struct PagingGetMultiplePagesLroOptions: Codable, Equatable {
    // MARK: Properties

    /// Sets the maximum number of items to return in the response.
    public let maxresults: Int32?
    /// Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
    public let timeout: Int32?

    // MARK: Initializers

    /// Initialize a `PagingGetMultiplePagesLroOptions` structure.
    /// - Parameters:
    ///   - maxresults: Sets the maximum number of items to return in the response.
    ///   - timeout: Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
    public init(
        maxresults: Int32? = nil, timeout: Int32? = nil
    ) {
        self.maxresults = maxresults
        self.timeout = timeout
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case maxresults = "maxresults"
        case timeout = "timeout"
    }

    /// Initialize a `PagingGetMultiplePagesLroOptions` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.maxresults = try? container.decode(Int32.self, forKey: .maxresults)
        self.timeout = try? container.decode(Int32.self, forKey: .timeout)
    }

    /// Encode a `PagingGetMultiplePagesLroOptions` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if maxresults != nil { try? container.encode(maxresults, forKey: .maxresults) }
        if timeout != nil { try? container.encode(timeout, forKey: .timeout) }
    }
}
