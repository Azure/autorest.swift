// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct PathsGci8RiGetRequestbodyContentApplicationXWwwFormUrlencodedSchema: Codable {
    // MARK: Properties

    /// Updated name of the pet
    public let name: String?
    /// Updated status of the pet
    public let status: String?

    // MARK: Initializers

    /// Initialize a `PathsGci8RiGetRequestbodyContentApplicationXWwwFormUrlencodedSchema` structure.
    /// - Parameters:
    ///   - name: Updated name of the pet
    ///   - status: Updated status of the pet
    public init(
        name: String? = nil, status: String? = nil
    ) {
        self.name = name
        self.status = status
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case name
        case status
    }

    /// Initialize a `PathsGci8RiGetRequestbodyContentApplicationXWwwFormUrlencodedSchema` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.name = try? container.decode(String.self, forKey: .name)
        self.status = try? container.decode(String.self, forKey: .status)
    }

    /// Encode a `PathsGci8RiGetRequestbodyContentApplicationXWwwFormUrlencodedSchema` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if name != nil { try? container.encode(name, forKey: .name) }
        if status != nil { try? container.encode(status, forKey: .status) }
    }
}
