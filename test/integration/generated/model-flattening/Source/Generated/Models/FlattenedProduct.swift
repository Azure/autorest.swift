// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

struct Properties: Codable {
    public let pName: String?
    public let typePropertiesType: String?
    public let provisioningStateValues: FlattenedProductPropertiesProvisioningStateValues?
    public let provisioningState: String?

    enum CodingKeys: String, CodingKey {
        case pName = "p.name"
        case typePropertiesType = "type"
        case provisioningStateValues = "provisioningStateValues"
        case provisioningState = "provisioningState"
    }

    public init(
        pName: String? = nil, typePropertiesType: String? = nil,
        provisioningStateValues: FlattenedProductPropertiesProvisioningStateValues? = nil,
        provisioningState: String? = nil
    ) {
        self.pName = pName
        self.typePropertiesType = typePropertiesType
        self.provisioningStateValues = provisioningStateValues
        self.provisioningState = provisioningState
    }
}

/// Flattened product.
public struct FlattenedProduct: Codable {
    // MARK: Properties

    /// Resource Id
    public let id: String?
    /// Resource Type
    public let type: String?
    /// Dictionary of <string>
    public let tags: [String: String]?
    /// Resource Location
    public let location: String?
    /// Resource Name
    public let name: String?

    internal let properties: Properties?
    public var pName: String? {
        return properties?.pName
    }

    public var typePropertiesType: String? {
        return properties?.typePropertiesType
    }

    public var provisioningStateValues: FlattenedProductPropertiesProvisioningStateValues? {
        return properties?.provisioningStateValues
    }

    public var provisioningState: String? {
        return properties?.provisioningState
    }

    // MARK: Initializers

    /// Initialize a `FlattenedProduct` structure.
    /// - Parameters:
    ///   - id: Resource Id
    ///   - type: Resource Type
    ///   - tags: Dictionary of <string>
    ///   - location: Resource Location
    ///   - name: Resource Name
    public init(
        pName: String? = nil, typePropertiesType: String? = nil,
        provisioningStateValues: FlattenedProductPropertiesProvisioningStateValues? = nil,
        provisioningState: String? = nil, id: String? = nil, type: String? = nil, tags: [String: String]? = nil,
        location: String? = nil, name: String? = nil
    ) {
        self.id = id
        self.type = type
        self.tags = tags
        self.location = location
        self.name = name
        self.properties = Properties(
            pName: pName, typePropertiesType: typePropertiesType, provisioningStateValues: provisioningStateValues,
            provisioningState: provisioningState
        )
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case id = "id"
        case type = "type"
        case tags = "tags"
        case location = "location"
        case name = "name"
        case properties
    }

    /// Initialize a `FlattenedProduct` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try? container.decode(String.self, forKey: .id)
        self.type = try? container.decode(String.self, forKey: .type)
        self.tags = try? container.decode([String: String].self, forKey: .tags)
        self.location = try? container.decode(String.self, forKey: .location)
        self.name = try? container.decode(String.self, forKey: .name)
        self.properties = try? container.decode(Properties.self, forKey: .properties)
    }

    /// Encode a `FlattenedProduct` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if id != nil { try? container.encode(id, forKey: .id) }
        if type != nil { try? container.encode(type, forKey: .type) }
        if tags != nil { try? container.encode(tags, forKey: .tags) }
        if location != nil { try? container.encode(location, forKey: .location) }
        if name != nil { try? container.encode(name, forKey: .name) }
        if properties != nil { try container.encode(properties, forKey: .properties) }
    }
}
