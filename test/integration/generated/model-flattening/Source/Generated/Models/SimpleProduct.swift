// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

struct Details: Codable {
    public let maxProductDisplayName: String?
    public let capacity: String?

    internal let max_product_image: Max_product_image

    enum CodingKeys: String, CodingKey {
        case maxProductDisplayName = "max_product_display_name"
        case capacity = "max_product_capacity"
        case max_product_image = "max_product_image"
    }

    public init(
        maxProductDisplayName: String? = nil, capacity: String? = nil, genericValue: String? = nil,
        odataValue: String? = nil
    ) {
        self.maxProductDisplayName = maxProductDisplayName
        self.capacity = capacity
        self.max_product_image = Max_product_image(
            genericValue: genericValue, odataValue: odataValue
        )
    }
}

struct Max_product_image: Codable {
    public let genericValue: String?
    public let odataValue: String?

    enum CodingKeys: String, CodingKey {
        case genericValue = "generic_value"
        case odataValue = "@odata.value"
    }

    public init(
        genericValue: String? = nil, odataValue: String? = nil
    ) {
        self.genericValue = genericValue
        self.odataValue = odataValue
    }
}

/// The product documentation.
public struct SimpleProduct: Codable {
    // MARK: Properties

    /// Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
    public let productId: String
    /// Description of product.
    public let description: String?

    internal let details: Details?
    public var maxProductDisplayName: String? {
        return details?.maxProductDisplayName
    }

    public var capacity: String? {
        return details?.capacity
    }

    // MARK: Initializers

    /// Initialize a `SimpleProduct` structure.
    /// - Parameters:
    ///   - productId: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
    ///   - description: Description of product.
    public init(
        maxProductDisplayName: String? = nil, capacity: String? = nil, genericValue: String? = nil,
        odataValue: String? = nil, productId: String, description: String? = nil
    ) {
        self.productId = productId
        self.description = description
        self.details = Details(
            maxProductDisplayName: maxProductDisplayName, capacity: capacity, genericValue: genericValue,
            odataValue: odataValue
        )
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case productId = "base_product_id"
        case description = "base_product_description"
        case details
    }

    /// Initialize a `SimpleProduct` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.productId = try container.decode(String.self, forKey: .productId)
        self.description = try? container.decode(String.self, forKey: .description)
        self.details = try? container.decode(Details.self, forKey: .details)
    }

    /// Encode a `SimpleProduct` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(productId, forKey: .productId)
        if description != nil { try? container.encode(description, forKey: .description) }
        if details != nil { try container.encode(details, forKey: .details) }
    }
}
