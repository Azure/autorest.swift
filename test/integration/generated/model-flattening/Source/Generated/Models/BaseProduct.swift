// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// The product documentation.
public struct BaseProduct: Codable, Equatable {
    // MARK: Properties

    /// Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
    public let productId: String
    /// Description of product.
    public let description: String?

    // MARK: Initializers

    /// Initialize a `BaseProduct` structure.
    /// - Parameters:
    ///   - productId: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
    ///   - description: Description of product.
    public init(
        productId: String, description: String? = nil
    ) {
        self.productId = productId
        self.description = description
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case productId = "base_product_id"
        case description = "base_product_description"
    }

    /// Initialize a `BaseProduct` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.productId = try container.decode(String.self, forKey: .productId)
        self.description = try? container.decode(String.self, forKey: .description)
    }

    /// Encode a `BaseProduct` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(productId, forKey: .productId)
        if description != nil { try? container.encode(description, forKey: .description) }
    }
}
