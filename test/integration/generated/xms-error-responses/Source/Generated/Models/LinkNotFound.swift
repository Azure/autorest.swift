// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct LinkNotFound: Codable, Swift.Error {
    // MARK: Properties

    public let whatSubAddress: String?

    public let reason: String?

    public let whatNotFound: String

    public let someBaseProp: String?

    // MARK: Initializers

    /// Initialize a `LinkNotFound` structure.
    /// - Parameters:
    ///   - whatSubAddress:
    ///   - reason:
    ///   - whatNotFound:
    ///   - someBaseProp:
    public init(
        whatSubAddress: String? = nil, reason: String? = nil, whatNotFound: String, someBaseProp: String? = nil
    ) {
        self.whatSubAddress = whatSubAddress
        self.reason = reason
        self.whatNotFound = whatNotFound
        self.someBaseProp = someBaseProp
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case whatSubAddress = "whatSubAddress"
        case reason = "reason"
        case whatNotFound = "whatNotFound"
        case someBaseProp = "someBaseProp"
    }

    /// Initialize a `LinkNotFound` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.whatSubAddress = try? container.decode(String.self, forKey: .whatSubAddress)
        self.reason = try? container.decode(String.self, forKey: .reason)
        self.whatNotFound = try container.decode(String.self, forKey: .whatNotFound)
        self.someBaseProp = try? container.decode(String.self, forKey: .someBaseProp)
    }

    /// Encode a `LinkNotFound` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if whatSubAddress != nil { try? container.encode(whatSubAddress, forKey: .whatSubAddress) }
        if reason != nil { try? container.encode(reason, forKey: .reason) }
        try container.encode(whatNotFound, forKey: .whatNotFound)
        if someBaseProp != nil { try? container.encode(someBaseProp, forKey: .someBaseProp) }
    }
}
